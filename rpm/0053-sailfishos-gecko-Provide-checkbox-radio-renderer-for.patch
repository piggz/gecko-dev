From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pavel Tumakaev <p.tumakaev@omprussia.ru>
Date: Sat, 28 Nov 2020 01:17:43 +0300
Subject: [PATCH] [sailfishos][gecko] Provide checkbox/radio renderer for
 Sailfish OS. Contributes to JB#52183

Adds a Sailfish OS specific renderer for checkboxes and radio buttons.
The rendering is similar to the Android rendering, drawn directly using
gecko's internal drawing methods.
---
 layout/style/res/forms.css    |   4 +
 widget/qt/QtColors.h          |  23 +++
 widget/qt/moz.build           |   3 +
 widget/qt/nsNativeThemeQt.cpp | 289 ++++++++++++++++++++++++++++++++++
 widget/qt/nsNativeThemeQt.h   |  60 +++++++
 widget/qt/nsWidgetFactory.cpp |  22 +++
 6 files changed, 401 insertions(+)
 create mode 100644 widget/qt/QtColors.h
 create mode 100644 widget/qt/nsNativeThemeQt.cpp
 create mode 100644 widget/qt/nsNativeThemeQt.h

diff --git a/layout/style/res/forms.css b/layout/style/res/forms.css
index b3b0b77fd583..c90077272651 100644
--- a/layout/style/res/forms.css
+++ b/layout/style/res/forms.css
@@ -554,6 +554,8 @@ input[type="radio"] {
   margin-block-end: 0px;
   margin-inline-start: 5px;
   margin-inline-end: 3px;
+  width: 16px;
+  height: 16px;
 }
 
 /* check boxes */
@@ -564,6 +566,8 @@ input[type="checkbox"] {
   margin-block-end: 3px;
   margin-inline-start: 4px;
   margin-inline-end: 3px;
+  width: 16px;
+  height: 16px;
 }
 
 /* common features of radio buttons and check boxes */
diff --git a/widget/qt/QtColors.h b/widget/qt/QtColors.h
new file mode 100644
index 000000000000..4622a1979120
--- /dev/null
+++ b/widget/qt/QtColors.h
@@ -0,0 +1,23 @@
+/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_widget_AndroidColors_h
+#define mozilla_widget_AndroidColors_h
+
+#include "mozilla/gfx/2D.h"
+
+namespace mozilla {
+namespace widget {
+
+static const gfx::Color sQtBackgroundColor(gfx::Color(1.0f, 1.0f, 1.0f));
+static const gfx::Color sQtBorderColor(gfx::Color(0.73f, 0.73f, 0.73f));
+static const gfx::Color sQtCheckColor(gfx::Color(0.19f, 0.21f, 0.23f));
+static const gfx::Color sQtDisabledColor(gfx::Color(0.88f, 0.88f, 0.88f));
+static const gfx::Color sQtActiveColor(gfx::Color(0.94f, 0.94f, 0.94f));
+
+}  // namespace widget
+}  // namespace mozilla
+
+#endif  // mozilla_widget_AndroidColors_h
diff --git a/widget/qt/moz.build b/widget/qt/moz.build
index 8003864d9559..35f5700ddd4e 100644
--- a/widget/qt/moz.build
+++ b/widget/qt/moz.build
@@ -13,6 +13,7 @@ SOURCES += [
     'nsClipboard.cpp',
     'nsIdleServiceQt.cpp',
     'nsLookAndFeel.cpp',
+    'nsNativeThemeQt.cpp',
     'nsQtKeyUtils.cpp',
     'nsScreenManagerQt.cpp',
     'nsScreenQt.cpp',
@@ -34,6 +35,8 @@ include('/ipc/chromium/chromium-config.mozbuild')
 FINAL_LIBRARY = 'xul'
 
 LOCAL_INCLUDES += [
+    '/gfx/2d',
+    '/layout/painting',
     '/widget',
 ]
 
diff --git a/widget/qt/nsNativeThemeQt.cpp b/widget/qt/nsNativeThemeQt.cpp
new file mode 100644
index 000000000000..d057f7a2cf02
--- /dev/null
+++ b/widget/qt/nsNativeThemeQt.cpp
@@ -0,0 +1,289 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsNativeThemeQt.h"
+
+#include "nsIFrame.h"
+#include "nsThemeConstants.h"
+#include "QtColors.h"
+#include "nsCSSRendering.h"
+#include "PathHelpers.h"
+
+NS_IMPL_ISUPPORTS_INHERITED(nsNativeThemeQt, nsNativeTheme, nsITheme)
+
+using namespace mozilla;
+using namespace mozilla::gfx;
+
+static const Float STROKE_WIDTH = Float(4.0f);
+static const Float RECT_RADII = Float(2.0f);
+static const int32_t RADIO_CHECK_DEFLATION = 3;
+static const int32_t RADIO_BORDER_DEFLATION = 2;
+
+static void ClampRectAndMoveToCenter(nsRect& aRect) {
+  if (aRect.width < aRect.height) {
+    aRect.y += (aRect.height - aRect.width) / 2;
+    aRect.height = aRect.width;
+    return;
+  }
+
+  if (aRect.height < aRect.width) {
+    aRect.x += (aRect.width - aRect.height) / 2;
+    aRect.width = aRect.height;
+  }
+}
+
+static void PaintCheckboxControl(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                                 const nsRect& aRect,
+                                 const EventStates& aState) {
+  // We fake native drawing of appearance: checkbox items out
+  // here, and use hardcoded colours from QtColors.h to
+  // simulate native theming.
+  RectCornerRadii innerRadii(RECT_RADII);
+  nsRect paddingRect =
+      nsCSSRendering::GetBoxShadowInnerPaddingRect(aFrame, aRect);
+  const nscoord twipsPerPixel = aFrame->PresContext()->DevPixelsToAppUnits(1);
+  Rect shadowGfxRect = NSRectToRect(paddingRect, twipsPerPixel);
+  shadowGfxRect.Round();
+  RefPtr<Path> roundedRect =
+      MakePathForRoundedRect(*aDrawTarget, shadowGfxRect, innerRadii);
+
+  aDrawTarget->Fill(
+      roundedRect,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBackgroundColor)));
+  if (aState.HasState(NS_EVENT_STATE_DISABLED)) {
+    aDrawTarget->Fill(
+        roundedRect,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtDisabledColor)));
+  } else if (aState.HasState(NS_EVENT_STATE_ACTIVE)) {
+    aDrawTarget->Fill(
+        roundedRect,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtActiveColor)));
+  }
+  aDrawTarget->Stroke(
+      roundedRect,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBorderColor)),
+      StrokeOptions(STROKE_WIDTH));
+}
+
+static void PaintCheckMark(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                           const nsRect& aRect) {
+
+  // Points come from the coordinates on a 7X7 unit box centered at 0,0
+  const int32_t checkPolygonX[] = {-3, -1, 3, 3, -1, -3};
+  const int32_t checkPolygonY[] = {-1, 1, -3, -1, 3, 1};
+  const int32_t checkNumPoints = sizeof(checkPolygonX) / sizeof(int32_t);
+  const int32_t checkSize = 9;  // 2 units of padding on either side
+                                // of the 7x7 unit checkmark
+
+  // Scale the checkmark based on the smallest dimension
+  nscoord paintScale = std::min(aRect.width, aRect.height) / checkSize;
+  nsPoint paintCenter(aRect.x + aRect.width / 2, aRect.y + aRect.height / 2);
+
+  RefPtr<PathBuilder> builder = aDrawTarget->CreatePathBuilder();
+  nsPoint p = paintCenter + nsPoint(checkPolygonX[0] * paintScale,
+                                    checkPolygonY[0] * paintScale);
+
+  int32_t appUnitsPerDevPixel = aFrame->PresContext()->AppUnitsPerDevPixel();
+  builder->MoveTo(NSPointToPoint(p, appUnitsPerDevPixel));
+  for (int32_t polyIndex = 1; polyIndex < checkNumPoints; polyIndex++) {
+    p = paintCenter + nsPoint(checkPolygonX[polyIndex] * paintScale,
+                              checkPolygonY[polyIndex] * paintScale);
+    builder->LineTo(NSPointToPoint(p, appUnitsPerDevPixel));
+  }
+  RefPtr<Path> path = builder->Finish();
+  aDrawTarget->Fill(
+      path, ColorPattern(ToDeviceColor(mozilla::widget::sQtCheckColor)));
+}
+
+static void PaintIndeterminateMark(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                                   const nsRect& aRect) {
+  int32_t appUnitsPerDevPixel = aFrame->PresContext()->AppUnitsPerDevPixel();
+
+  nsRect rect(aRect);
+  rect.y += (rect.height - rect.height / 4) / 2;
+  rect.height /= 4;
+
+  Rect devPxRect = NSRectToSnappedRect(rect, appUnitsPerDevPixel, *aDrawTarget);
+
+  aDrawTarget->FillRect(
+      devPxRect,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtCheckColor)));
+}
+
+static void PaintRadioControl(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                              const nsRect& aRect, const EventStates& aState) {
+  // We fake native drawing of appearance: radio items out
+  // here, and use hardcoded colours from QtColors.h to
+  // simulate native theming.
+  const nscoord twipsPerPixel = aFrame->PresContext()->DevPixelsToAppUnits(1);
+  Rect devPxRect = NSRectToRect(aRect, twipsPerPixel);
+  devPxRect.Deflate(RADIO_BORDER_DEFLATION);
+
+  RefPtr<PathBuilder> builder = aDrawTarget->CreatePathBuilder();
+  AppendEllipseToPath(builder, devPxRect.Center(), devPxRect.Size());
+  RefPtr<Path> ellipse = builder->Finish();
+
+  aDrawTarget->Fill(
+      ellipse,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBackgroundColor)));
+
+  if (aState.HasState(NS_EVENT_STATE_DISABLED)) {
+    aDrawTarget->Fill(
+        ellipse,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtDisabledColor)));
+  } else if (aState.HasState(NS_EVENT_STATE_ACTIVE)) {
+    aDrawTarget->Fill(
+        ellipse,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtActiveColor)));
+  }
+  aDrawTarget->Stroke(
+      ellipse,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBorderColor)),
+      StrokeOptions(STROKE_WIDTH));
+}
+
+static void PaintCheckedRadioButton(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                                    const nsRect& aRect) {
+  // The dot is an ellipse RADIO_CHECK_DEFLATION px on all sides
+  // smaller than the content-box, drawn in the foreground color.
+  nsRect rect(aRect);
+  rect.Deflate(nsPresContext::CSSPixelsToAppUnits(RADIO_CHECK_DEFLATION));
+
+  Rect devPxRect = ToRect(nsLayoutUtils::RectToGfxRect(
+      rect, aFrame->PresContext()->AppUnitsPerDevPixel()));
+
+  RefPtr<PathBuilder> builder = aDrawTarget->CreatePathBuilder();
+  AppendEllipseToPath(builder, devPxRect.Center(), devPxRect.Size());
+  RefPtr<Path> ellipse = builder->Finish();
+  aDrawTarget->Fill(
+      ellipse,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtCheckColor)));
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::DrawWidgetBackground(gfxContext* aContext,
+                                           nsIFrame* aFrame,
+                                           uint8_t aWidgetType,
+                                           const nsRect& aRect,
+                                           const nsRect& aDirtyRect) {
+  EventStates eventState = GetContentState(aFrame, aWidgetType);
+  nsRect rect(aRect);
+  ClampRectAndMoveToCenter(rect);
+
+  switch (aWidgetType) {
+    case NS_THEME_RADIO:
+      PaintRadioControl(aFrame, aContext->GetDrawTarget(), rect, eventState);
+      if (IsSelected(aFrame)) {
+        PaintCheckedRadioButton(aFrame, aContext->GetDrawTarget(), rect);
+      }
+      break;
+    case NS_THEME_CHECKBOX:
+      PaintCheckboxControl(aFrame, aContext->GetDrawTarget(), rect, eventState);
+      if (IsChecked(aFrame)) {
+        PaintCheckMark(aFrame, aContext->GetDrawTarget(), rect);
+      }
+      if (GetIndeterminate(aFrame)) {
+        PaintIndeterminateMark(aFrame, aContext->GetDrawTarget(), rect);
+      }
+      break;
+    default:
+      MOZ_ASSERT_UNREACHABLE(
+          "Should not get here with a widget type we don't support.");
+      return NS_ERROR_NOT_IMPLEMENTED;
+  }
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::GetWidgetBorder(nsDeviceContext* aContext,
+                                      nsIFrame* aFrame, uint8_t aWidgetType,
+                                      nsIntMargin* aResult) {
+  *aResult = nsIntMargin();
+  return NS_OK;
+}
+
+bool nsNativeThemeQt::GetWidgetPadding(nsDeviceContext* aContext,
+                                            nsIFrame* aFrame,
+                                            uint8_t aWidgetType,
+                                            nsIntMargin* aResult) {
+  switch (aWidgetType) {
+    // Radios and checkboxes return a fixed size in GetMinimumWidgetSize
+    // and have a meaningful baseline, so they can't have
+    // author-specified padding.
+    case NS_THEME_CHECKBOX:
+    case NS_THEME_RADIO:
+      aResult->SizeTo(0, 0, 0, 0);
+      return true;
+  }
+  return false;
+}
+
+bool nsNativeThemeQt::GetWidgetOverflow(nsDeviceContext* aContext,
+                                             nsIFrame* aFrame,
+                                             uint8_t aWidgetType,
+                                             nsRect* aOverflowRect) {
+  return false;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::GetMinimumWidgetSize(nsPresContext* aPresContext,
+                                           nsIFrame* aFrame,
+                                           uint8_t aWidgetType,
+                                           LayoutDeviceIntSize* aResult,
+                                           bool* aIsOverridable) {
+  if (aWidgetType == NS_THEME_RADIO || aWidgetType == NS_THEME_CHECKBOX) {
+    // 9px + (1px padding + 1px border) * 2
+    aResult->width = aPresContext->CSSPixelsToDevPixels(13);
+    aResult->height = aPresContext->CSSPixelsToDevPixels(13);
+  }
+
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::WidgetStateChanged(nsIFrame* aFrame, uint8_t aWidgetType,
+                                         nsAtom* aAttribute,
+                                         bool* aShouldRepaint,
+                                         const nsAttrValue* aOldValue) {
+  if (aWidgetType == NS_THEME_RADIO || aWidgetType == NS_THEME_CHECKBOX) {
+    if (aAttribute == nsGkAtoms::active || aAttribute == nsGkAtoms::disabled ||
+        aAttribute == nsGkAtoms::hover) {
+      *aShouldRepaint = true;
+      return NS_OK;
+    }
+  }
+
+  *aShouldRepaint = false;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::ThemeChanged() { return NS_OK; }
+
+NS_IMETHODIMP_(bool)
+nsNativeThemeQt::ThemeSupportsWidget(nsPresContext* aPresContext,
+                                          nsIFrame* aFrame,
+                                          uint8_t aWidgetType) {
+  switch (aWidgetType) {
+    case NS_THEME_RADIO:
+    case NS_THEME_CHECKBOX:
+      return true;
+  }
+
+  return false;
+}
+
+NS_IMETHODIMP_(bool)
+nsNativeThemeQt::WidgetIsContainer(uint8_t aWidgetType) { return false; }
+
+bool nsNativeThemeQt::ThemeDrawsFocusForWidget(uint8_t aWidgetType) {
+  return false;
+}
+
+bool nsNativeThemeQt::ThemeNeedsComboboxDropmarker() { return false; }
+
+nsITheme::Transparency nsNativeThemeQt::GetWidgetTransparency(
+    nsIFrame* aFrame, uint8_t aWidgetType) {
+  return eUnknownTransparency;
+}
diff --git a/widget/qt/nsNativeThemeQt.h b/widget/qt/nsNativeThemeQt.h
new file mode 100644
index 000000000000..2a3498c6cda2
--- /dev/null
+++ b/widget/qt/nsNativeThemeQt.h
@@ -0,0 +1,60 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsNativeThemeQt_h_
+#define nsNativeThemeQt_h_
+
+#include "nsITheme.h"
+#include "nsNativeTheme.h"
+
+class nsNativeThemeQt final : private nsNativeTheme, public nsITheme {
+ public:
+  NS_DECL_ISUPPORTS_INHERITED
+
+  // The nsITheme interface.
+  NS_IMETHOD DrawWidgetBackground(gfxContext* aContext, nsIFrame* aFrame,
+                                  uint8_t aWidgetType, const nsRect& aRect,
+                                  const nsRect& aDirtyRect) override;
+
+  NS_IMETHOD GetWidgetBorder(nsDeviceContext* aContext, nsIFrame* aFrame,
+                             uint8_t aWidgetType,
+                             nsIntMargin* aResult) override;
+
+  bool GetWidgetPadding(nsDeviceContext* aContext, nsIFrame* aFrame,
+                        uint8_t aWidgetType, nsIntMargin* aResult) override;
+
+  bool GetWidgetOverflow(nsDeviceContext* aContext, nsIFrame* aFrame,
+                         uint8_t aWidgetType, nsRect* aOverflowRect) override;
+
+  NS_IMETHOD GetMinimumWidgetSize(nsPresContext* aPresContext, nsIFrame* aFrame,
+                                  uint8_t aWidgetType,
+                                  mozilla::LayoutDeviceIntSize* aResult,
+                                  bool* aIsOverridable) override;
+
+  NS_IMETHOD WidgetStateChanged(nsIFrame* aFrame, uint8_t aWidgetType,
+                                nsAtom* aAttribute, bool* aShouldRepaint,
+                                const nsAttrValue* aOldValue) override;
+
+  NS_IMETHOD ThemeChanged() override;
+
+  NS_IMETHOD_(bool)
+  ThemeSupportsWidget(nsPresContext* aPresContext, nsIFrame* aFrame,
+                      uint8_t aWidgetType) override;
+
+  NS_IMETHOD_(bool) WidgetIsContainer(uint8_t aWidgetType) override;
+
+  NS_IMETHOD_(bool) ThemeDrawsFocusForWidget(uint8_t aWidgetType) override;
+
+  bool ThemeNeedsComboboxDropmarker() override;
+
+  Transparency GetWidgetTransparency(nsIFrame* aFrame,
+                                     uint8_t aWidgetType) override;
+
+  nsNativeThemeQt() {}
+
+ protected:
+  virtual ~nsNativeThemeQt() {}
+};
+
+#endif  // nsNativeThemeQt_h_
diff --git a/widget/qt/nsWidgetFactory.cpp b/widget/qt/nsWidgetFactory.cpp
index 87817a0b4a5f..83515897df2c 100644
--- a/widget/qt/nsWidgetFactory.cpp
+++ b/widget/qt/nsWidgetFactory.cpp
@@ -31,6 +31,8 @@
 #include "nsTransferable.h"
 #include "nsBidiKeyboard.h"
 
+#include "nsNativeThemeQt.h"
+
 #include "nsHTMLFormatConverter.h"
 #include "nsXULAppAPI.h"
 
@@ -75,12 +77,30 @@ NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(GfxInfo, Init)
 }
 }
 
+static nsresult nsNativeThemeQtConstructor(nsISupports *aOuter,
+                                                REFNSIID aIID, void **aResult) {
+  nsresult rv;
+  if (aOuter) {
+    rv = NS_ERROR_NO_AGGREGATION;
+    return rv;
+  }
+
+  *aResult = nullptr;
+
+  nsNativeThemeQt *inst = new nsNativeThemeQt();
+  NS_ADDREF(inst);
+  rv = inst->QueryInterface(aIID, aResult);
+  NS_RELEASE(inst);
+
+  return rv;
+}
 
 NS_DEFINE_NAMED_CID(NS_APPSHELL_CID);
 NS_DEFINE_NAMED_CID(NS_BIDIKEYBOARD_CID);
 NS_DEFINE_NAMED_CID(NS_WINDOW_CID);
 NS_DEFINE_NAMED_CID(NS_CHILD_CID);
 NS_DEFINE_NAMED_CID(NS_SCREENMANAGER_CID);
+NS_DEFINE_NAMED_CID(NS_THEMERENDERER_CID);
 NS_DEFINE_NAMED_CID(NS_HTMLFORMATCONVERTER_CID);
 NS_DEFINE_NAMED_CID(NS_IDLE_SERVICE_CID);
 NS_DEFINE_NAMED_CID(NS_TRANSFERABLE_CID);
@@ -104,6 +124,7 @@ static const mozilla::Module::CIDEntry kWidgetCIDs[] = {
     { &kNS_HTMLFORMATCONVERTER_CID, false, nullptr, nsHTMLFormatConverterConstructor },
     { &kNS_IDLE_SERVICE_CID, false, nullptr, nsIdleServiceQtConstructor },
     { &kNS_SCREENMANAGER_CID, false, nullptr, nsScreenManagerQtConstructor },
+    { &kNS_THEMERENDERER_CID, false, nullptr, nsNativeThemeQtConstructor},
     { &kNS_TRANSFERABLE_CID, false, nullptr, nsTransferableConstructor },
     { &kNS_WINDOW_CID, false, nullptr, nsWindowConstructor },
     { &kNS_GFXINFO_CID, false, nullptr, mozilla::widget::GfxInfoConstructor },
@@ -119,6 +140,7 @@ static const mozilla::Module::CIDEntry kWidgetCIDs[] = {
 
 static const mozilla::Module::ContractIDEntry kWidgetContracts[] = {
     { "@mozilla.org/gfx/screenmanager;1", &kNS_SCREENMANAGER_CID },
+    { "@mozilla.org/chrome/chrome-native-theme;1", &kNS_THEMERENDERER_CID},
     { "@mozilla.org/widget/appshell/qt;1", &kNS_APPSHELL_CID },
     { "@mozilla.org/widget/bidikeyboard;1", &kNS_BIDIKEYBOARD_CID },
     { "@mozilla.org/widget/clipboard;1", &kNS_CLIPBOARD_CID },
-- 
2.26.2

