From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raine Makelainen <raine.makelainen@jolla.com>
Date: Thu, 17 Sep 2020 17:47:45 +0300
Subject: [PATCH] [sailfishos][contentaction] Fix content action integration to
 work. Fixes JB#51235

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
---
 uriloader/exthandler/moz.build                |  5 ++
 uriloader/exthandler/nsContentHandlerApp.cpp  | 78 +++++++++++++++++++
 uriloader/exthandler/unix/nsMIMEInfoUnix.cpp  | 36 +++++++++
 uriloader/exthandler/unix/nsMIMEInfoUnix.h    |  5 ++
 .../exthandler/unix/nsOSHelperAppService.cpp  |  7 ++
 xpcom/io/nsLocalFileUnix.cpp                  | 11 +++
 6 files changed, 142 insertions(+)
 create mode 100644 uriloader/exthandler/nsContentHandlerApp.cpp

diff --git a/uriloader/exthandler/moz.build b/uriloader/exthandler/moz.build
index cabe2513273d..8dae49b2b6ed 100644
--- a/uriloader/exthandler/moz.build
+++ b/uriloader/exthandler/moz.build
@@ -113,6 +113,11 @@ if CONFIG['MOZ_ENABLE_DBUS']:
         'DBusHelpers.h',
     ]
 
+if CONFIG['MOZ_ENABLE_CONTENTACTION']:
+    UNIFIED_SOURCES += [
+        'nsContentHandlerApp.cpp',
+    ]
+
 EXTRA_COMPONENTS += [
     'nsHandlerService-json.js',
     'nsHandlerService-json.manifest',
diff --git a/uriloader/exthandler/nsContentHandlerApp.cpp b/uriloader/exthandler/nsContentHandlerApp.cpp
new file mode 100644
index 000000000000..b5fd8b4e012d
--- /dev/null
+++ b/uriloader/exthandler/nsContentHandlerApp.cpp
@@ -0,0 +1,78 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+ * vim:expandtab:shiftwidth=2:tabstop=2:cin:
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsContentHandlerApp.h"
+#include "nsIURI.h"
+#include "nsIClassInfoImpl.h"
+#include "nsCOMPtr.h"
+#include "nsString.h"
+
+#define NS_CONTENTHANDLER_CID \
+{ 0x43ec2c82, 0xb9db, 0x4835, {0x80, 0x3f, 0x64, 0xc9, 0x72, 0x5a, 0x70, 0x28 } }
+
+NS_IMPL_CLASSINFO(nsContentHandlerApp, nullptr, 0, NS_CONTENTHANDLER_CID)
+NS_IMPL_ISUPPORTS_CI(nsContentHandlerApp, nsIHandlerApp)
+
+nsContentHandlerApp::nsContentHandlerApp(nsString aName, nsCString aType,
+                                         ContentAction::Action& aAction) :
+  mName(aName),
+  mType(aType),
+  mAction(aAction)
+{
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//// nsIHandlerInfo
+
+NS_IMETHODIMP nsContentHandlerApp::GetName(nsAString& aName)
+{
+  aName.Assign(mName);
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsContentHandlerApp::SetName(const nsAString& aName)
+{
+  mName.Assign(aName);
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsContentHandlerApp::Equals(nsIHandlerApp *aHandlerApp, bool *_retval)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP nsContentHandlerApp::GetDetailedDescription(nsAString& aDetailedDescription)
+{
+  aDetailedDescription.Assign(mDetailedDescription);
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsContentHandlerApp::SetDetailedDescription(const nsAString& aDetailedDescription)
+{
+  mDetailedDescription.Assign(aDetailedDescription);
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsContentHandlerApp::LaunchWithURI(nsIURI *aURI,
+                                   nsIInterfaceRequestor *aWindowContext)
+{
+  nsAutoCString spec;
+  nsresult rv = aURI->GetAsciiSpec(spec);
+  NS_ENSURE_SUCCESS(rv,rv);
+  const char* url = spec.get();
+
+  QList<ContentAction::Action> actions =
+    ContentAction::Action::actionsForFile(QUrl(url), QString(mType.get()));
+  for (int i = 0; i < actions.size(); ++i) {
+    if (actions[i].name() == QString((QChar*)mName.get(), mName.Length())) {
+      actions[i].trigger();
+      break;
+    }
+  }
+
+  return NS_OK;
+}
diff --git a/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp b/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp
index 786b1f7b79a3..bfd2209c1fb0 100644
--- a/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp
+++ b/uriloader/exthandler/unix/nsMIMEInfoUnix.cpp
@@ -62,6 +62,15 @@ nsMIMEInfoUnix::GetHasDefaultHandler(bool *_retval) {
 
   if (*_retval) return NS_OK;
 
+#if defined(MOZ_ENABLE_CONTENTACTION)
+  ContentAction::Action action =
+    ContentAction::Action::defaultActionForFile(QUrl(), QString(mSchemeOrType.get()));
+  if (action.isValid()) {
+    *_retval = true;
+    return NS_OK;
+  }
+#endif
+
   return NS_OK;
 }
 
@@ -108,3 +117,30 @@ nsresult nsMIMEInfoUnix::LaunchDefaultWithFile(nsIFile *aFile) {
 
   return app->LaunchWithURI(uri, nullptr);
 }
+
+#if defined(MOZ_ENABLE_CONTENTACTION)
+NS_IMETHODIMP
+nsMIMEInfoUnix::GetPossibleApplicationHandlers(nsIMutableArray ** aPossibleAppHandlers)
+{
+  if (!mPossibleApplications) {
+    mPossibleApplications = do_CreateInstance(NS_ARRAY_CONTRACTID);
+
+    if (!mPossibleApplications)
+      return NS_ERROR_OUT_OF_MEMORY;
+
+    QList<ContentAction::Action> actions =
+      ContentAction::Action::actionsForFile(QUrl(), QString(mSchemeOrType.get()));
+
+    for (int i = 0; i < actions.size(); ++i) {
+      nsContentHandlerApp* app =
+        new nsContentHandlerApp(nsString((char16_t*)actions[i].name().data()),
+                                mSchemeOrType, actions[i]);
+      mPossibleApplications->AppendElement(app);
+    }
+  }
+
+  *aPossibleAppHandlers = mPossibleApplications;
+  NS_ADDREF(*aPossibleAppHandlers);
+  return NS_OK;
+}
+#endif
diff --git a/uriloader/exthandler/unix/nsMIMEInfoUnix.h b/uriloader/exthandler/unix/nsMIMEInfoUnix.h
index f5775ebdf21f..4d75f9936a80 100644
--- a/uriloader/exthandler/unix/nsMIMEInfoUnix.h
+++ b/uriloader/exthandler/unix/nsMIMEInfoUnix.h
@@ -19,6 +19,11 @@ class nsMIMEInfoUnix : public nsMIMEInfoImpl {
       : nsMIMEInfoImpl(aType, aClass) {}
   static bool HandlerExists(const char *aProtocolScheme);
 
+#if defined(MOZ_ENABLE_CONTENTACTION)
+  NS_IMETHOD GetPossibleApplicationHandlers(
+      nsIMutableArray **aPossibleAppHandlers) override;
+#endif
+
  protected:
   NS_IMETHOD GetHasDefaultHandler(bool *_retval) override;
 
diff --git a/uriloader/exthandler/unix/nsOSHelperAppService.cpp b/uriloader/exthandler/unix/nsOSHelperAppService.cpp
index d5b318f12217..0bf9432529c6 100644
--- a/uriloader/exthandler/unix/nsOSHelperAppService.cpp
+++ b/uriloader/exthandler/unix/nsOSHelperAppService.cpp
@@ -1051,6 +1051,13 @@ nsresult nsOSHelperAppService::OSProtocolHandlerExists(
 #ifdef MOZ_WIDGET_GTK
     // Check the GNOME registry for a protocol handler
     *aHandlerExists = nsGNOMERegistry::HandlerExists(aProtocolScheme);
+#elif defined(MOZ_ENABLE_CONTENTACTION)
+    // libcontentaction requires character ':' after scheme
+    ContentAction::Action action =
+      ContentAction::Action::defaultActionForScheme(QString(aProtocolScheme) + ':');
+
+    if (action.isValid())
+      *aHandlerExists = true;
 #else
     *aHandlerExists = false;
 #endif
diff --git a/xpcom/io/nsLocalFileUnix.cpp b/xpcom/io/nsLocalFileUnix.cpp
index d0fdfb14b33b..66eeb94b0f4d 100644
--- a/xpcom/io/nsLocalFileUnix.cpp
+++ b/xpcom/io/nsLocalFileUnix.cpp
@@ -1962,6 +1962,17 @@ nsLocalFile::Launch() {
   }
 
   return giovfs->ShowURIForInput(mPath);
+#elif defined(MOZ_ENABLE_CONTENTACTION)
+  QUrl uri = QUrl::fromLocalFile(QString::fromUtf8(mPath.get()));
+  ContentAction::Action action =
+    ContentAction::Action::defaultActionForFile(uri);
+
+  if (action.isValid()) {
+    action.trigger();
+    return NS_OK;
+  }
+
+  return NS_ERROR_FAILURE;
 #elif defined(MOZ_WIDGET_ANDROID)
   // Try to get a mimetype, if this fails just use the file uri alone
   nsresult rv;
-- 
2.26.2

