From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: David Llewellyn-Jones <david@flypig.co.uk>
Date: Thu, 18 Jun 2020 11:19:57 +0000
Subject: [PATCH] [sailfishos][gecko] Allow render shaders to be loaded from
 file

This change is turned off by default. Set
COMPOSITOR_LOAD_SHADERS_FROM_FILE to enable it (see below).

Ordinarily shaders are generated in-code. This can be cumbersome since a
rebuilt is needed just to edit a shader.

This change will search for shaders in the ~/shaders/ folder, named
using the hex representation of the feature bitfield (e.g. 2080.fs and
2080.vs for the respective fragment and vertex shaders with
ENABLE_TEXTURE_RB_SWAP=0x80 and ENABLE_DEAA=0x2000 enabled; see
the ShaderFeatures enum in OGLShaderProgram.h for the flag values).

Define COMPOSITOR_LOAD_SHADERS_FROM_FILE to enable the code,
for example by adding the following to the %build section of
xulrunner-qt5.spec to enable it.

echo "export CXXFLAGS=\"\$CXXFLAGS \
  -DCOMPOSITOR_LOAD_SHADERS_FROM_FILE \"" >> "$MOZCONFIG"

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
---
 gfx/layers/opengl/OGLShaderProgram.cpp | 35 ++++++++++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/gfx/layers/opengl/OGLShaderProgram.cpp b/gfx/layers/opengl/OGLShaderProgram.cpp
index 9b44284cdd80..ec269dc4b735 100644
--- a/gfx/layers/opengl/OGLShaderProgram.cpp
+++ b/gfx/layers/opengl/OGLShaderProgram.cpp
@@ -16,6 +16,9 @@
 #include "nsString.h"  // for nsAutoCString
 #include "Layers.h"
 #include "GLContext.h"
+#ifdef COMPOSITOR_LOAD_SHADERS_FROM_FILE
+#include <fstream>
+#endif // #ifdef COMPOSITOR_LOAD_SHADERS_FROM_FILE
 
 namespace mozilla {
 namespace layers {
@@ -567,6 +570,38 @@ void ShaderConfigOGL::SetDynamicGeometry(bool aEnabled) {
   fs << "  gl_FragColor = color;" << endl;
   fs << "}" << endl;
 
+#ifdef COMPOSITOR_LOAD_SHADERS_FROM_FILE
+  ostringstream vertexFile;
+  vertexFile << "~/shaders/" << std::hex << aConfig.mFeatures << ".vs";
+  printf_stderr("OGL: Attempting to read vertex shader: %s\n", vertexFile.str().c_str());
+
+  std::ifstream vertexStream(vertexFile.str());
+  if (vertexStream.is_open()) {
+      printf_stderr("OGL: Tweaked vertex shader found\n");
+      vs.str("");
+      vs.clear();
+      vs << vertexStream.rdbuf();
+  }
+  else {
+      printf_stderr("OGL: No vertex shader found, using default\n");
+  }
+
+  ostringstream fragmentFile;
+  fragmentFile << "~/shaders/" << std::hex << aConfig.mFeatures << ".fs";
+  printf_stderr("OGL: Attempting to read fragment shader: %s\n", fragmentFile.str().c_str());
+
+  std::ifstream fragmentStream(fragmentFile.str());
+  if (fragmentStream.is_open()) {
+      printf_stderr("OGL: Tweaked fragment shader found\n");
+      fs.str("");
+      fs.clear();
+      fs << fragmentStream.rdbuf();
+  }
+  else {
+      printf_stderr("OGL: No fragment shader found, using default\n");
+  }
+#endif // #ifdef COMPOSITOR_LOAD_SHADERS_FROM_FILE
+
   result.mVertexShaderString = vs.str();
   result.mFragmentShaderString = fs.str();
 
-- 
2.26.2

