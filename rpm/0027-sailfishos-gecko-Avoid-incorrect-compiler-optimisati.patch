From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raine Makelainen <raine.makelainen@jolla.com>
Date: Tue, 21 Apr 2020 23:14:14 +0300
Subject: [PATCH] [sailfishos][gecko] Avoid incorrect compiler optimisation.
 JB#49864

When building using gcc 8.3 and -O3, the null check on
IsInsideNursery() from js/public/HeapAPI.h gets dropped when used inside
the ProxyObject::New() method from js/src/vm/ProxyObject.cpp, called
from "priv.toGCThing()->isTenured()" on line 50 of the same file.

Since it's possible for the cell pointer to be null, the
over-optimisation can cause SIGSERV crashes.

SeaMonkey bug 1584533i details the same issue:
https://bugzilla.mozilla.org/show_bug.cgi?id=1584533

The fix adds the appropriate check back in directly to the
ProxyObject::New() code, which then doesn't get optimised out.

[gecko] Configuration option. JB#49613

All js and core configuration options should be
defined in this patch.

- With 32bit arm (Linaro GCC 8.2-2018.08) startup of of the context
failed similarly as https://bugzilla.mozilla.org/show_bug.cgi?id=1337263
Also MacOS builds were reporting similar failures but those were fixed
differently.

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
Signed-off-by: David Llewellyn-Jones <david.llewellyn-jones@jolla.com>
---
 js/src/old-configure.in   | 2 +-
 js/src/vm/ProxyObject.cpp | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/js/src/old-configure.in b/js/src/old-configure.in
index 3d53ee1c3c81..286643091d8c 100644
--- a/js/src/old-configure.in
+++ b/js/src/old-configure.in
@@ -620,7 +620,7 @@ case "$target" in
 *-*linux*)
     if test "$GNU_CC" -o "$GNU_CXX"; then
         MOZ_PGO_OPTIMIZE_FLAGS="-O3"
-        MOZ_OPTIMIZE_FLAGS="-O3"
+        MOZ_OPTIMIZE_FLAGS="-O3 -fno-schedule-insns"
         if test -z "$CLANG_CC"; then
            MOZ_OPTIMIZE_FLAGS="-freorder-blocks $MOZ_OPTIMIZE_FLAGS"
         fi
diff --git a/js/src/vm/ProxyObject.cpp b/js/src/vm/ProxyObject.cpp
index 13b52fd6077f..c6166ad61f43 100644
--- a/js/src/vm/ProxyObject.cpp
+++ b/js/src/vm/ProxyObject.cpp
@@ -78,7 +78,7 @@ static gc::AllocKind GetProxyGCObjectKind(const Class* clasp,
     MOZ_ASSERT(priv.isNull() ||
                (priv.isGCThing() && priv.toGCThing()->isTenured()));
     newKind = SingletonObject;
-  } else if ((priv.isGCThing() && priv.toGCThing()->isTenured()) ||
+  } else if ((priv.isGCThing() && priv.toGCThing() && priv.toGCThing()->isTenured()) ||
              !handler->canNurseryAllocate()) {
     newKind = TenuredObject;
   }
-- 
2.26.2

