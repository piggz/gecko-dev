From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raine Makelainen <raine.makelainen@jolla.com>
Date: Fri, 17 Apr 2020 12:44:15 +0300
Subject: [PATCH] [sailfishos][compositor] Allow compositor specializations to
 override the composite (part 2). JB#50505

Original author: Andrew den Exter <andrew.den.exter@qinetic.com.au>
SHA1: ba21a8694e261769fa53e54a846eeaa651826769

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
---
 gfx/layers/ipc/CompositorBridgeParent.cpp      | 4 ++++
 gfx/layers/ipc/CompositorBridgeParent.h        | 1 +
 gfx/layers/ipc/CompositorVsyncScheduler.cpp    | 9 ++++++---
 gfx/layers/ipc/CompositorVsyncSchedulerOwner.h | 1 +
 gfx/layers/wr/WebRenderBridgeParent.cpp        | 4 ++++
 gfx/layers/wr/WebRenderBridgeParent.h          | 1 +
 6 files changed, 17 insertions(+), 3 deletions(-)

diff --git a/gfx/layers/ipc/CompositorBridgeParent.cpp b/gfx/layers/ipc/CompositorBridgeParent.cpp
index 8c46544bb115..bc42db565798 100644
--- a/gfx/layers/ipc/CompositorBridgeParent.cpp
+++ b/gfx/layers/ipc/CompositorBridgeParent.cpp
@@ -831,6 +831,10 @@ void CompositorBridgeParent::ScheduleComposition() {
   });
 }
 
+void CompositorBridgeParent::CompositeToDefaultTarget() {
+  CompositeToTarget(nullptr);
+}
+
 void CompositorBridgeParent::CompositeToTarget(DrawTarget* aTarget,
                                                const gfx::IntRect* aRect) {
   AUTO_PROFILER_TRACING("Paint", "Composite");
diff --git a/gfx/layers/ipc/CompositorBridgeParent.h b/gfx/layers/ipc/CompositorBridgeParent.h
index 25c8db6daea8..75e02da8a685 100644
--- a/gfx/layers/ipc/CompositorBridgeParent.h
+++ b/gfx/layers/ipc/CompositorBridgeParent.h
@@ -586,6 +586,7 @@ class CompositorBridgeParent : public CompositorBridgeParentBase,
   void FinishPendingComposite() override;
   void CompositeToTarget(gfx::DrawTarget* aTarget,
                          const gfx::IntRect* aRect = nullptr) override;
+  virtual void CompositeToDefaultTarget() override;
 
   bool InitializeAdvancedLayers(const nsTArray<LayersBackend>& aBackendHints,
                                 TextureFactoryIdentifier* aOutIdentifier);
diff --git a/gfx/layers/ipc/CompositorVsyncScheduler.cpp b/gfx/layers/ipc/CompositorVsyncScheduler.cpp
index 7cb89bdaa13f..57b6762f18e4 100644
--- a/gfx/layers/ipc/CompositorVsyncScheduler.cpp
+++ b/gfx/layers/ipc/CompositorVsyncScheduler.cpp
@@ -217,8 +217,7 @@ void CompositorVsyncScheduler::Composite(TimeStamp aVsyncTimestamp) {
     mLastCompose = aVsyncTimestamp;
 
     // Tell the owner to do a composite
-    mVsyncSchedulerOwner->CompositeToTarget(nullptr, nullptr);
-
+    mVsyncSchedulerOwner->CompositeToDefaultTarget();
     mVsyncNotificationsSkipped = 0;
 
     TimeDuration compositeFrameTotal = TimeStamp::Now() - aVsyncTimestamp;
@@ -254,7 +253,11 @@ void CompositorVsyncScheduler::ForceComposeToTarget(gfx::DrawTarget* aTarget,
 
   mLastCompose = TimeStamp::Now();
   MOZ_ASSERT(mVsyncSchedulerOwner);
-  mVsyncSchedulerOwner->CompositeToTarget(aTarget, aRect);
+  if (aTarget) {
+      mVsyncSchedulerOwner->CompositeToTarget(aTarget, aRect);
+  } else {
+      mVsyncSchedulerOwner->CompositeToDefaultTarget();
+  }
 }
 
 bool CompositorVsyncScheduler::NeedsComposite() {
diff --git a/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h b/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
index 672b319f6dcb..2ee2098c41c4 100644
--- a/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
+++ b/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
@@ -21,6 +21,7 @@ class CompositorVsyncSchedulerOwner {
   virtual void FinishPendingComposite() = 0;
   virtual void CompositeToTarget(gfx::DrawTarget* aTarget,
                                  const gfx::IntRect* aRect = nullptr) = 0;
+  virtual void CompositeToDefaultTarget() = 0;
 };
 
 }  // namespace layers
diff --git a/gfx/layers/wr/WebRenderBridgeParent.cpp b/gfx/layers/wr/WebRenderBridgeParent.cpp
index c5bb7ce082de..1e5e0a7baeef 100644
--- a/gfx/layers/wr/WebRenderBridgeParent.cpp
+++ b/gfx/layers/wr/WebRenderBridgeParent.cpp
@@ -1427,5 +1427,9 @@ void WebRenderBridgeParent::ExtractImageCompositeNotifications(
   mAsyncImageManager->FlushImageNotifications(aNotifications);
 }
 
+void mozilla::layers::WebRenderBridgeParent::CompositeToDefaultTarget() {
+  CompositeToTarget(nullptr);
+}
+
 }  // namespace layers
 }  // namespace mozilla
diff --git a/gfx/layers/wr/WebRenderBridgeParent.h b/gfx/layers/wr/WebRenderBridgeParent.h
index e7ff57777358..276761f6d27e 100644
--- a/gfx/layers/wr/WebRenderBridgeParent.h
+++ b/gfx/layers/wr/WebRenderBridgeParent.h
@@ -160,6 +160,7 @@ class WebRenderBridgeParent final : public PWebRenderBridgeParent,
   void FinishPendingComposite() override {}
   void CompositeToTarget(gfx::DrawTarget* aTarget,
                          const gfx::IntRect* aRect = nullptr) override;
+  virtual void CompositeToDefaultTarget() override;
 
   // CompositableParentManager
   bool IsSameProcess() const override;
-- 
2.26.2

