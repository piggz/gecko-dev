From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raine Makelainen <raine.makelainen@jolla.com>
Date: Wed, 19 Aug 2020 09:17:05 +0300
Subject: [PATCH] [sailfishos][gecko] Hackish fix for preferences usage in
 Parent process (part 1)

Inspired by SHA1: 18b3279b0851758df8805b760e9026d45fcf142c Mon Sep 17 00:00:00 2001
From: Tatiana Meshkova <tanya.meshkova@gmail.com>
Date: Tue, 20 Jan 2015 23:49:38 -0800

Hackish fix for preferences usage in Parent process. Added basic
compositor initialization in Parent process

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
---
 dom/ipc/DOMTypes.ipdlh                        | 21 ++++++++++++
 dom/ipc/PContent.ipdl                         | 18 ----------
 .../composite/LayerManagerComposite.cpp       |  4 ++-
 gfx/layers/ipc/LayerTransactionParent.h       |  5 +++
 gfx/thebes/gfxPlatform.cpp                    |  2 +-
 modules/libpref/Preferences.cpp               | 33 ++++++++++++++++---
 6 files changed, 59 insertions(+), 24 deletions(-)

diff --git a/dom/ipc/DOMTypes.ipdlh b/dom/ipc/DOMTypes.ipdlh
index dc3171ba4084..35cf6ce4601f 100644
--- a/dom/ipc/DOMTypes.ipdlh
+++ b/dom/ipc/DOMTypes.ipdlh
@@ -17,6 +17,9 @@ using struct mozilla::void_t
 using struct mozilla::SerializedStructuredCloneBuffer
   from "ipc/IPCMessageUtils.h";
 
+using struct mozilla::null_t
+  from "ipc/IPCMessageUtils.h";
+
 using LayoutDeviceIntRect from "Units.h";
 using DesktopIntRect from "Units.h";
 using DesktopToLayoutDeviceScale from "Units.h";
@@ -124,5 +127,23 @@ struct CreatedWindowInfo
   DimensionInfo dimensions;
 };
 
+union PrefValue {
+  nsCString;
+  int32_t;
+  bool;
+};
+
+union MaybePrefValue {
+  PrefValue;
+  null_t;
+};
+
+struct Pref {
+  nsCString name;
+  bool isLocked;
+  MaybePrefValue defaultValue;
+  MaybePrefValue userValue;
+};
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/ipc/PContent.ipdl b/dom/ipc/PContent.ipdl
index 5d077976569a..f79e689a5254 100644
--- a/dom/ipc/PContent.ipdl
+++ b/dom/ipc/PContent.ipdl
@@ -144,24 +144,6 @@ union SystemFontListEntry {
     FontPatternListEntry;
 };
 
-union PrefValue {
-  nsCString;
-  int32_t;
-  bool;
-};
-
-union MaybePrefValue {
-  PrefValue;
-  null_t;
-};
-
-struct Pref {
-  nsCString name;
-  bool isLocked;
-  MaybePrefValue defaultValue;
-  MaybePrefValue userValue;
-};
-
 struct DataStorageItem {
   nsCString key;
   nsCString value;
diff --git a/gfx/layers/composite/LayerManagerComposite.cpp b/gfx/layers/composite/LayerManagerComposite.cpp
index 3b04be12d2bf..f0266fc261be 100644
--- a/gfx/layers/composite/LayerManagerComposite.cpp
+++ b/gfx/layers/composite/LayerManagerComposite.cpp
@@ -153,7 +153,9 @@ LayerManagerComposite::~LayerManagerComposite() { Destroy(); }
 
 void LayerManagerComposite::Destroy() {
   if (!mDestroyed) {
-    mCompositor->GetWidget()->CleanupWindowEffects();
+    if (mCompositor->GetWidget()) {
+      mCompositor->GetWidget()->CleanupWindowEffects();
+    }
     if (mRoot) {
       RootLayer()->Destroy();
     }
diff --git a/gfx/layers/ipc/LayerTransactionParent.h b/gfx/layers/ipc/LayerTransactionParent.h
index 7729150d7219..3596a6b98f70 100644
--- a/gfx/layers/ipc/LayerTransactionParent.h
+++ b/gfx/layers/ipc/LayerTransactionParent.h
@@ -18,6 +18,10 @@
 
 namespace mozilla {
 
+namespace embedlite {
+class EmbedLiteCompositorProcessParent;
+}
+
 namespace ipc {
 class Shmem;
 }  // namespace ipc
@@ -175,6 +179,7 @@ class LayerTransactionParent final : public PLayerTransactionParent,
   friend class CompositorBridgeParent;
   friend class CrossProcessCompositorBridgeParent;
   friend class layout::RenderFrameParent;
+  friend class mozilla::embedlite::EmbedLiteCompositorProcessParent;
 
  private:
   // This is a function so we can log or breakpoint on why hit
diff --git a/gfx/thebes/gfxPlatform.cpp b/gfx/thebes/gfxPlatform.cpp
index 4f560f80d0f7..7db374964622 100644
--- a/gfx/thebes/gfxPlatform.cpp
+++ b/gfx/thebes/gfxPlatform.cpp
@@ -810,7 +810,7 @@ void gfxPlatform::Init() {
   // Request the imgITools service, implicitly initializing ImageLib.
   nsCOMPtr<imgITools> imgTools = do_GetService("@mozilla.org/image/tools;1");
   if (!imgTools) {
-    MOZ_CRASH("Could not initialize ImageLib");
+//    MOZ_CRASH("Could not initialize ImageLib");
   }
 
   RegisterStrongMemoryReporter(new GfxMemoryImageReporter());
diff --git a/modules/libpref/Preferences.cpp b/modules/libpref/Preferences.cpp
index 08096c5ff359..41e4e08e1307 100644
--- a/modules/libpref/Preferences.cpp
+++ b/modules/libpref/Preferences.cpp
@@ -82,6 +82,8 @@
 #include "plstr.h"
 #include "prlink.h"
 
+#include "mozilla/embedlite/EmbedLiteAppProcessParent.h"
+
 #ifdef XP_WIN
 #include "windows.h"
 #endif
@@ -2779,6 +2781,11 @@ Preferences::~Preferences() {
   gPrefNameArena.Clear();
 }
 
+static mozilla::embedlite::EmbedLiteAppProcessParent* GetEmbedLiteParent()
+{
+  return mozilla::embedlite::EmbedLiteAppProcessParent::GetInstance();
+}
+
 NS_IMPL_ISUPPORTS(Preferences, nsIPrefService, nsIObserver, nsIPrefBranch,
                   nsISupportsWeakReference)
 
@@ -3663,7 +3670,9 @@ static nsresult pref_ReadPrefFromJar(nsZipArchive* aJarReader,
 /* static */ nsresult Preferences::GetBool(const char* aPrefName, bool* aResult,
                                            PrefValueKind aKind) {
   MOZ_ASSERT(aResult);
-  NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
+  if (!GetEmbedLiteParent()) {
+    NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
+  }
 
   Pref* pref = pref_HashTableLookup(aPrefName);
   return pref ? pref->GetBoolValue(aKind, aResult) : NS_ERROR_UNEXPECTED;
@@ -3673,7 +3682,9 @@ static nsresult pref_ReadPrefFromJar(nsZipArchive* aJarReader,
                                           int32_t* aResult,
                                           PrefValueKind aKind) {
   MOZ_ASSERT(aResult);
-  NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
+  if (!GetEmbedLiteParent()) {
+    NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
+  }
 
   Pref* pref = pref_HashTableLookup(aPrefName);
   return pref ? pref->GetIntValue(aKind, aResult) : NS_ERROR_UNEXPECTED;
@@ -3683,7 +3694,6 @@ static nsresult pref_ReadPrefFromJar(nsZipArchive* aJarReader,
                                             float* aResult,
                                             PrefValueKind aKind) {
   MOZ_ASSERT(aResult);
-
   nsAutoCString result;
   nsresult rv = Preferences::GetCString(aPrefName, result, aKind);
   if (NS_SUCCEEDED(rv)) {
@@ -3695,7 +3705,10 @@ static nsresult pref_ReadPrefFromJar(nsZipArchive* aJarReader,
 /* static */ nsresult Preferences::GetCString(const char* aPrefName,
                                               nsACString& aResult,
                                               PrefValueKind aKind) {
-  NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
+
+  if (!GetEmbedLiteParent()) {
+    NS_ENSURE_TRUE(InitStaticMembers(), NS_ERROR_NOT_AVAILABLE);
+  }
 
   aResult.SetIsVoid(true);
 
@@ -4091,6 +4104,9 @@ static void BoolVarChanged(const char* aPref, void* aClosure) {
   AssertNotAlreadyCached("bool", aPref, aCache);
 #endif
   *aCache = GetBool(aPref, aDefault);
+  if (GetEmbedLiteParent()) {
+    return NS_OK;
+  }
   CacheData* data = new CacheData();
   data->mCacheLocation = aCache;
   data->mDefaultValueBool = aDefault;
@@ -4164,6 +4180,9 @@ template <MemoryOrdering Order>
   AssertNotAlreadyCached("int", aPref, aCache);
 #endif
   *aCache = Preferences::GetInt(aPref, aDefault);
+  if (GetEmbedLiteParent()) {
+    return NS_OK;
+  }
   CacheData* data = new CacheData();
   data->mCacheLocation = aCache;
   data->mDefaultValueUint = aDefault;
@@ -4188,6 +4207,9 @@ static void UintVarChanged(const char* aPref, void* aClosure) {
   AssertNotAlreadyCached("uint", aPref, aCache);
 #endif
   *aCache = Preferences::GetUint(aPref, aDefault);
+  if (GetEmbedLiteParent()) {
+    return NS_OK;
+  }
   CacheData* data = new CacheData();
   data->mCacheLocation = aCache;
   data->mDefaultValueUint = aDefault;
@@ -4258,6 +4280,9 @@ static void FloatVarChanged(const char* aPref, void* aClosure) {
   AssertNotAlreadyCached("float", aPref, aCache);
 #endif
   *aCache = Preferences::GetFloat(aPref, aDefault);
+  if (GetEmbedLiteParent()) {
+    return NS_OK;
+  }
   CacheData* data = new CacheData();
   data->mCacheLocation = aCache;
   data->mDefaultValueFloat = aDefault;
-- 
2.26.2

